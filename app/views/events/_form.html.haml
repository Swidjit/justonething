.item_form
  = semantic_form_for @item do |f|
    = render :partial => 'items/top_of_form', :locals => { :f => f }
    = f.inputs :class => 'extra_inform_box' do
      %li.text
        = image_tag('blue_tag.png')
        Information
      = f.input :location, :input_html => {:placeholder => 'Event Location'}
      = f.input :start_date, :input_html => {:placeholder => 'Start Date', :value => @item.start_datetime('date'), :class => 'datepicker event_start_date'}
      = f.input :start_time, :input_html => {:placeholder => 'Start Time', :value => @item.start_datetime('time'), :class => 'timepicker'}
      %li.text
        = check_box_tag 'has-end-time', 1, f.object.end_datetime.present?
        %label{for: 'has-end-time'} The event has an end time.
      = f.input :end_date, :input_html => {:placeholder => 'End Date', :value => @item.end_datetime('date'), :class => 'datepicker event_end_date'}
      = f.input :end_time, :input_html => {:placeholder => 'End Time', :value => @item.end_datetime('time'), :class => 'timepicker'}
    =f.inputs :class => 'extra_inform_box' do
      %li.text
        = image_tag('blue_tag.png')
        Event Recurrence
      - if f.object.imported and f.object.is_recurring?
        %li.text= f.object.next_occurrence
      - else
        / Rules
        %li
          %label
            = radio_button_tag "event[rule]", 'daily', f.object.is_daily?
            %span This event repeats daily until the expiration date below.
        %li
          %label
            = radio_button_tag "event[rule]", 'weekly', f.object.is_weekly?
            %span
              This event repeats weekly on
              = select_tag "event[weekly_day]", options_for_select(f.object.weekday_options, f.object.weekly_day)
              until the expiration date below
        %li
          %label
            = radio_button_tag "event[rule]", 'monthly_week', f.object.is_monthly_week?
            %span
              This event repeats every
              = select_tag "event[monthly_week]", options_for_select(f.object.week_of_month_options, f.object.monthly_week)
              = select_tag "event[monthly_day]", options_for_select(f.object.weekday_options, f.object.monthly_day)
              of the month until the expiration date below.
        %li
          %label
            = radio_button_tag "event[rule]", 'monthly_date', f.object.is_monthly_date?
            %span
              This event repeats every
              = select_tag "event[monthly_date]", options_for_select(f.object.date_of_month_options, f.object.monthly_date)
              of the month until the expiration date below.

    = f.inputs :class => 'extra_inform_box' do
      %li.text
        = image_tag('blue_tag.png')
        Additional Times
        %br
        - f.object.times.each do |time|
          .additional-time
            = text_field_tag 'event[times][][start_date]', time.start_date, placeholder: 'Start Date', class: 'datepicker time_start_date'
            = text_field_tag 'event[times][][start_time]', time.start_time, placeholder: 'Start Time', class: 'timepicker'
            = link_to "Remove", "#", class: 'remove-time'
        #new-event-time-form
          .additional-time
            = text_field_tag 'event[times][][start_date]', nil, placeholder: 'Start Date', class: 'datepicker time_start_date'
            = text_field_tag 'event[times][][start_time]', nil, placeholder: 'Start Time', class: 'timepicker'
            = link_to "Remove", "#", class: 'remove-time'
        %a#add-another-time{:href => '#'} Add Another Time
        %br
        = javascript_tag "swidjit.activateEvent()"
        

    = f.inputs :class => 'extra_inform_box' do
      %li.text
        = image_tag('blue_tag.png')
        Extra Information
        %span optional
      = f.input :cost, :input_html => {:placeholder => 'Cost'}
    = render :partial => 'items/bottom_of_form', :locals => { :f => f, :item => @item }